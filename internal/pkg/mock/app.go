// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/app.go

// Package app_mock is a generated GoMock package.
package app_mock

import (
	gomock "github.com/golang/mock/gomock"
	app "github.com/mattribution/api/internal/app"
	reflect "reflect"
)

// MockTracks is a mock of Tracks interface
type MockTracks struct {
	ctrl     *gomock.Controller
	recorder *MockTracksMockRecorder
}

// MockTracksMockRecorder is the mock recorder for MockTracks
type MockTracksMockRecorder struct {
	mock *MockTracks
}

// NewMockTracks creates a new mock instance
func NewMockTracks(ctrl *gomock.Controller) *MockTracks {
	mock := &MockTracks{ctrl: ctrl}
	mock.recorder = &MockTracksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracks) EXPECT() *MockTracksMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockTracks) Store(t app.Track) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", t)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockTracksMockRecorder) Store(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTracks)(nil).Store), t)
}

// MockKpis is a mock of Kpis interface
type MockKpis struct {
	ctrl     *gomock.Controller
	recorder *MockKpisMockRecorder
}

// MockKpisMockRecorder is the mock recorder for MockKpis
type MockKpisMockRecorder struct {
	mock *MockKpis
}

// NewMockKpis creates a new mock instance
func NewMockKpis(ctrl *gomock.Controller) *MockKpis {
	mock := &MockKpis{ctrl: ctrl}
	mock.recorder = &MockKpisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKpis) EXPECT() *MockKpisMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockKpis) Store(kpi app.Kpi) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", kpi)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockKpisMockRecorder) Store(kpi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockKpis)(nil).Store), kpi)
}

// Delete mocks base method
func (m *MockKpis) Delete(id, ownerID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, ownerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockKpisMockRecorder) Delete(id, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKpis)(nil).Delete), id, ownerID)
}
